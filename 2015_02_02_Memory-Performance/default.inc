# The C compiler to be used\nCC       = gcc\n\n# The C++ compiler to be used\nCXX      = g++\n\n# The archiver to be used\nAR       = ar\n\n# The command to remove files\nRM       = rm -f\n\n# Flags to be passed to both C and C++ code\nCPPFLAGS = -Wall -Wextra -pedantic\n\n# Flags to be passed to C code\nCFLAGS   = -O0\n\n# Flags to be passed to C++ code\nCXXFLAGS = -O0\n\n# Flags to be passed to the linker, prior to listing of object files.\nLDFLAGS  =\n\n# Flags to be passed to the linker, after the listing of object files.\nLDLIBS   =\n\n# A list of directories containing source files containing "int\n# main()".  Each file will be compiled into a separate executable.\nEXE_DIRECTORIES = .\n\n# A list of directories containing other source files.  Each file will\n# be compiled, with the resulting source file being linked into each\n# executable.\nSRC_DIRECTORIES = src\n\n# A list of directories containing include files.  Each directory will\n# be made available for #include directives for included files.\nINC_DIRECTORIES = include\n\n# A list of directories that contain libraries.  The list can also\n# contain patterns that expand to directories that contain libraries.\n# Each library is ex\nLIB_DIRECTORIES = lib?*\n\n# If BUILD_SHARED is non-zero, shared libraries will be generated.  If\n# BUILD_SHARED is greater than BUILD_STATIC, executables will be\n# linked against the shared libraries.\nBUILD_SHARED = 1\n\n# If BUILD_STATIC is non-zero, static libraries will be generated.  If\n# BUILD_STATIC is greater than BUILD_SHARED, executables will be\n# linked against the static libraries.\nBUILD_STATIC = 0\n\n# Mandatory arguments to both C and C++ compilers.  These arguments\n# will be passed even if CPPFLAGS has been overridden by command-line\n# arguments.\nCPPFLAGS_EXTRA =\n\n# Mandatory arguments to the C compiler.  These arguments will be\n# passed even if CFLAGS has been overriden by command-line arguments.\nCFLAGS_EXTRA =\n\n# Mandatory arguments to the C++ compiler.  These arguments will be\n# passed even if CXXFLAGS has been overridden by command-line arguments.\nCXXFLAGS_EXTRA = -std=c++11\n\n# Mandatory arguments to the linker, before the listing of object\n# files.  These arguments will be passed even if LDFLAGS has been\n# overridden by command-line arguments.\nLDFLAGS_EXTRA  = -Llib -Wl,-rpath,\$$ORIGIN/../lib -Wl,--no-as-needed\n\n# Mandatory arguments to the linker, after the listing of object\n# files.  These arguments will be passed even if LDLIBS has been\n# overridden by command-line arguments.\nLDLIBS_EXTRA   =\n\n# Static libraries that should be linked into the executables.  The\n# order of libraries is the order of inclusion.\nEXTERNAL_STATIC_LIBS =\n\n# Flag to generate position-independent code.  This is passed to\n# object files being compiled to shared libraries, but not to any\n# other object files.\nPIC_FLAG = -fPIC\n\n# A space-delimited list of file extensions to be compiled as C code.\n# No element of this list should be present in CPP_EXT.\nC_EXT   = c\n\n# A space-delimited list of file extensions to be compiled as C++\n# code.  No element of this list should be present in C_EXT.\nCPP_EXT = C cc cpp cxx c++ cp\n\n# A function that, when given the name of a library, should return the\n# output file of a shared library.  For example, the default version,\n# when passed "MyLibrary" as $(1), will return "lib/libMyLibrary.so".\nSHARED_LIBRARY_NAME = lib/lib$(1).so\n\n# A function that, when given the name of a library, should return the\n# output file of a static library.  For example, the default version,\n# when passed "MyLibrary" as $(1), will return "lib/libMyLibrary.a".\nSTATIC_LIBRARY_NAME = lib/lib$(1).a\n\n#   A macro to determine whether executables will be linked against\n# static libraries or shared libraries.  By default, will compile\n# against the shared libraries if BUILD_SHARED has a greater numeric\n# value than BUILD_STATIC, and will compile against the static\n# libraries otherwise.\n#   To always link against shared libraries, change this variable to\n# 0.  To always link against static libraries, change this variable to 1.\nLINK_AGAINST_STATIC = $(shell test "$(BUILD_SHARED)" -gt "$(BUILD_STATIC)"; echo $$?)\n\n# A function that, given the base name of a source file, returns the\n# output filename of the executable.  For example, the default\n# version, when passed "MyProgram" as $(1), will return "bin/MyProgram".\nEXE_NAME     = bin/$(1)\n\n# Determines whether the output is in color or not.  To disable\n# coloring, set this variable to 0.\nUSE_COLOR = 1\n\n# The location to which extra resources should be installed.\nINSTALL_DEST =\n\n# Extra resources that should be copied to $(INSTALL_DEST).  These can\n# be either files or directories.\nINSTALL_RESOURCES =\n\n# A listing of the files and directories to be cleaned when running\n# "make clean".\nCLEAN_TARGETS = bin lib build\n\n# Which system is the target system.  This may be used by library\n# targets to choose which system libraries to include.\nSYSTEM = native\n\n# The command to be run to run tests.  This command will be run when\n# running "make test".  If this variable is an empty string, then this\n# target will be left undefined.\nTEST_COMMAND =\n
